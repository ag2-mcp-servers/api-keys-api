# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T00:54:44+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class Status(BaseModel):
    code: Optional[int] = Field(
        None,
        description='The status code, which should be an enum value of google.rpc.Code.',
    )
    details: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='A list of messages that carry the error details. There is a common set of message types for APIs to use.',
    )
    message: Optional[str] = Field(
        None,
        description='A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.',
    )


class V2AndroidApplication(BaseModel):
    packageName: Optional[str] = Field(
        None, description='The package name of the application.'
    )
    sha1Fingerprint: Optional[str] = Field(
        None,
        description='The SHA1 fingerprint of the application. For example, both sha1 formats are acceptable : DA:39:A3:EE:5E:6B:4B:0D:32:55:BF:EF:95:60:18:90:AF:D8:07:09 or DA39A3EE5E6B4B0D3255BFEF95601890AFD80709. Output format is the latter.',
    )


class V2AndroidKeyRestrictions(BaseModel):
    allowedApplications: Optional[List[V2AndroidApplication]] = Field(
        None,
        description='A list of Android applications that are allowed to make API calls with this key.',
    )


class V2ApiTarget(BaseModel):
    methods: Optional[List[str]] = Field(
        None,
        description='Optional. List of one or more methods that can be called. If empty, all methods for the service are allowed. A wildcard (*) can be used as the last symbol. Valid examples: `google.cloud.translate.v2.TranslateService.GetSupportedLanguage` `TranslateText` `Get*` `translate.googleapis.com.Get*`',
    )
    service: Optional[str] = Field(
        None,
        description='The service for this restriction. It should be the canonical service name, for example: `translate.googleapis.com`. You can use [`gcloud services list`](/sdk/gcloud/reference/services/list) to get a list of services that are enabled in the project.',
    )


class V2BrowserKeyRestrictions(BaseModel):
    allowedReferrers: Optional[List[str]] = Field(
        None,
        description='A list of regular expressions for the referrer URLs that are allowed to make API calls with this key.',
    )


class V2GetKeyStringResponse(BaseModel):
    keyString: Optional[str] = Field(
        None, description='An encrypted and signed value of the key.'
    )


class V2IosKeyRestrictions(BaseModel):
    allowedBundleIds: Optional[List[str]] = Field(
        None,
        description='A list of bundle IDs that are allowed when making API calls with this key.',
    )


class V2LookupKeyResponse(BaseModel):
    name: Optional[str] = Field(
        None,
        description='The resource name of the API key. If the API key has been purged, resource name is empty.',
    )
    parent: Optional[str] = Field(
        None,
        description='The project that owns the key with the value specified in the request.',
    )


class V2ServerKeyRestrictions(BaseModel):
    allowedIps: Optional[List[str]] = Field(
        None,
        description='A list of the caller IP addresses that are allowed to make API calls with this key.',
    )


class V2UndeleteKeyRequest(BaseModel):
    pass


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class Operation(BaseModel):
    done: Optional[bool] = Field(
        None,
        description='If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.',
    )
    error: Optional[Status] = Field(
        None,
        description='The error result of the operation in case of failure or cancellation.',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.',
    )
    name: Optional[str] = Field(
        None,
        description='The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.',
    )
    response: Optional[Dict[str, Any]] = Field(
        None,
        description='The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.',
    )


class V2Restrictions(BaseModel):
    androidKeyRestrictions: Optional[V2AndroidKeyRestrictions] = Field(
        None, description='The Android apps that are allowed to use the key.'
    )
    apiTargets: Optional[List[V2ApiTarget]] = Field(
        None,
        description='A restriction for a specific service and optionally one or more specific methods. Requests are allowed if they match any of these restrictions. If no restrictions are specified, all targets are allowed.',
    )
    browserKeyRestrictions: Optional[V2BrowserKeyRestrictions] = Field(
        None,
        description='The HTTP referrers (websites) that are allowed to use the key.',
    )
    iosKeyRestrictions: Optional[V2IosKeyRestrictions] = Field(
        None, description='The iOS apps that are allowed to use the key.'
    )
    serverKeyRestrictions: Optional[V2ServerKeyRestrictions] = Field(
        None, description='The IP addresses of callers that are allowed to use the key.'
    )


class V2Key(BaseModel):
    annotations: Optional[Dict[str, str]] = Field(
        None,
        description='Annotations is an unstructured key-value map stored with a policy that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects.',
    )
    createTime: Optional[str] = Field(
        None,
        description='Output only. A timestamp identifying the time this key was originally created.',
    )
    deleteTime: Optional[str] = Field(
        None,
        description='Output only. A timestamp when this key was deleted. If the resource is not deleted, this must be empty.',
    )
    displayName: Optional[str] = Field(
        None,
        description='Human-readable display name of this key that you can modify. The maximum length is 63 characters.',
    )
    etag: Optional[str] = Field(
        None,
        description='Output only. A checksum computed by the server based on the current value of the Key resource. This may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. See https://google.aip.dev/154.',
    )
    keyString: Optional[str] = Field(
        None,
        description='Output only. An encrypted and signed value held by this key. This field can be accessed only through the `GetKeyString` method.',
    )
    name: Optional[str] = Field(
        None,
        description='Output only. The resource name of the key. The `name` has the form: `projects//locations/global/keys/`. For example: `projects/123456867718/locations/global/keys/b7ff1f9f-8275-410a-94dd-3855ee9b5dd2` NOTE: Key is a global resource; hence the only supported value for location is `global`.',
    )
    restrictions: Optional[V2Restrictions] = Field(
        None, description='Key restrictions.'
    )
    uid: Optional[str] = Field(
        None, description='Output only. Unique id in UUID4 format.'
    )
    updateTime: Optional[str] = Field(
        None,
        description='Output only. A timestamp identifying the time this key was last updated.',
    )


class V2ListKeysResponse(BaseModel):
    keys: Optional[List[V2Key]] = Field(None, description='A list of API keys.')
    nextPageToken: Optional[str] = Field(
        None, description='The pagination token for the next page of results.'
    )
